<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOP"/>
<constant value="1" name="FORWARD_0"/>
<constant value="2" name="TURN_LEFT_0"/>
<constant value="3" name="BACK_0"/>
<constant value="4" name="TURN_LEFT_1"/>
<constant value="5" name="WAIT_0"/>
<constant value="6" name="WAIT_1"/>
<constant value="7" name="FORWARD_1"/>
<constant value="8" name="KEEP_FORWARD"/>
<constant value="9" name="FORWARD_2"/>
<constant value="10" name="TURN_RIGHT_0"/>
<constant value="0" name="PASS_1"/>
<constant value="1" name="PASS_2"/>
<constant value="11" name="BACK_1"/>
<constant value="12" name="TURN_RIGHT_1"/>
<constant value="13" name="TURNING"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state
var pass
onevent button.backward
	callsub stop

onevent button.left
	callsub forward_0
	callsub count_1

onevent button.right
	callsub forward_2
	callsub count_1

onevent prox
	if state == FORWARD_1 and (prox.ground.delta[0] &lt;= 100 or prox.ground.delta[1] &lt;= 100) then
		callsub keep_forward
	end

onevent timer0
	if state == FORWARD_0 and timer.period[0] >= 14500 then
		timer.period[0] = 0
		callsub turn_left_0
	elseif state == FORWARD_2 and timer.period[0] >= 14500 then
		timer.period[0] = 0
		callsub turn_right_0
	elseif state == TURN_LEFT_0 and timer.period[0] >= 800 then
		timer.period[0] = 0
		callsub back_0
	elseif state == TURN_RIGHT_0 and timer.period[0] >= 800 then
		timer.period[0] = 0
		callsub back_1
	elseif state == BACK_0 and timer.period[0] >= 2000 then
		timer.period[0] = 0
		callsub turn_left_1
	elseif state == BACK_1 and timer.period[0] >= 2000 then
		timer.period[0] = 0
		callsub turn_right_1
	elseif state == TURN_LEFT_1 and timer.period[0] >= 800 then
		callsub wait_0
	elseif state == TURN_RIGHT_1 and timer.period[0] >= 800 then
		callsub wait_0
	elseif state == WAIT_0 and timer.period[0] >= 30000 then
		callsub wait_1
	elseif state == WAIT_1 and timer.period[0] >= 4050 then
		callsub forward_1
	elseif state == KEEP_FORWARD and timer.period[0] >= 850 then
		callsub turning
	end

onevent timer1
	if state == PASS_1 and timer.period[1] >= 30000 then
		timer.period[1] = 0
		callsub count_2
	elseif  state == PASS_2 and timer.period[1] >= 30000 then
		timer.period[1] = 0
		callsub death
	end

sub stop
	state = STOP
	timer.period[0] = 0
	motor.left.target = 0
	motor.right.target = 0

sub forward_0
	state = FORWARD_0
	motor.left.target = 300
	motor.right.target = 300
	timer.period[0] = 14500

sub forward_2
	state = FORWARD_2
	motor.left.target = 300
	motor.right.target = 300
	timer.period[0] = 14500

sub turn_left_0
	state = TURN_LEFT_0
	motor.left.target = -300
	motor.right.target = 300
	timer.period[0] = 800

sub turn_right_0
	state = TURN_RIGHT_0
	motor.left.target = 300
	motor.right.target = -300
	timer.period[0] = 800

sub back_0
	state = BACK_0
	motor.left.target = -300
	motor.right.target = -300
	timer.period[0] = 2000

sub back_1
	state = BACK_1
	motor.left.target = -300
	motor.right.target = -300
	timer.period[0] = 2000
	
sub turn_left_1
	state = TURN_LEFT_1
	motor.left.target = -300
	motor.right.target = 300
	timer.period[0] = 800

sub turn_right_1
	state = TURN_RIGHT_1
	motor.left.target = 300
	motor.right.target = -300
	timer.period[0] = 800
	
sub wait_0
	state = WAIT_0
	motor.left.target = 0
	motor.right.target = 0
	timer.period[0] = 30000

sub wait_1
	state = WAIT_1
	motor.left.target = 0
	motor.right.target = 0
	timer.period[0] = 4050

sub forward_1
	state = FORWARD_1
	motor.left.target = 500
	motor.right.target = 500

sub keep_forward
	state = KEEP_FORWARD
	motor.left.target = 500
	motor.right.target = 500
	timer.period[0] = 850

sub turning
	state = TURNING
	motor.left.target = 500
	motor.right.target = -500

sub count_1
	pass = PASS_1
	timer.period[1] = 30000

sub count_2
	pass = PASS_2
	timer.period[1] = 30000 

sub death
	timer.period[0] = 0
	motor.left.target = 0
	motor.right.target = 0
	call leds.circle(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000)



	
	</node>


</network>
