<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOP"/>
<constant value="1" name="FORWARD_0"/>
<constant value="2" name="FORWARD_1"/>
<constant value="3" name="KEEP_FORWARD"/>
<constant value="4" name="TURN_LEFT"/>
<constant value="5" name="KEEP_TURN_LEFT"/>
<constant value="6" name="FOLLOW_THE_LINE"/>
<constant value="7" name="BACK"/>
<constant value="8" name="TURN_RIGHT"/>
<constant value="9" name="KEEP_TURN_RIGHT"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state
onevent button.backward
	callsub stop
	
#onevent button.right
	#callsub capture_pattern
	#callsub color_LED
	#call math.fill(beliefs, 1000/8)
	#callsub display_beliefs

onevent button.forward
	callsub forward_0
	
onevent timer0
	if state == FORWARD_0 and timer.period[0] >= 2000 then
		timer.period[0] = 0
		callsub forward_1
	elseif  state == KEEP_FORWARD and timer.period[0] >= 1100 then
		timer.period[0] = 0
		callsub turn_left
	elseif  state == KEEP_TURN_LEFT and timer.period[0] >= 35 then
		timer.period[0] = 0
		callsub follow_the_line
	elseif state == BACK and timer.period[0] >= 500 then
		timer.period[0] = 0
		callsub turn_right
	elseif state == TURN_RIGHT and timer.period[0] >= 930 then
		timer.period[0] = 0
		callsub forward_1
	elseif state == KEEP_TURN_RIGHT and timer.period[0] >= 925 then
		timer.period[0] = 0
		callsub forward_1
	end
	
onevent prox
	if state == FORWARD_1 and prox.ground.delta[0] &lt;= 10 then
		callsub keep_forward
	end
	if state == FORWARD_1 and prox.horizontal[0] >= 3000 and prox.horizontal[4] >= 3000 then
		callsub keep_turn_right
	end
	if state == TURN_LEFT and prox.ground.delta[0] &lt;= 10 then
		callsub keep_turn_left
	end
	if state == FOLLOW_THE_LINE and prox.horizontal[0] >= 2500 and prox.horizontal[4] >= 2500 then
		callsub back
	end

sub stop
	state = STOP
	motor.left.target = 0
	motor.right.target = 0
	timer.period[0] = 0
	call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)
	#call leds.top(0, 0, 0)

sub forward_0
	state = FORWARD_0
	motor.left.target = 200
	motor.right.target = 200
	timer.period[0] = 2000

sub forward_1
	state = FORWARD_1
	motor.left.target = 200
	motor.right.target = 200

sub keep_forward
	state = KEEP_FORWARD
	motor.left.target = 200
	motor.right.target = 200
	timer.period[0] = 1100

sub turn_left
	state = TURN_LEFT
	motor.left.target = -200
	motor.right.target = 200

sub keep_turn_left
	state = KEEP_TURN_LEFT
	motor.left.target = -200
	motor.right.target = 200
	timer.period[0] = 35

sub follow_the_line
	state = FOLLOW_THE_LINE
	motor.left.target = 200
	motor.right.target = 200

sub back
	state = BACK
	motor.left.target = -200
	motor.right.target = -200
	timer.period[0] = 500
	
sub turn_right
	state = TURN_RIGHT
	motor.left.target = 200
	motor.right.target = -200
	timer.period[0] = 930

sub keep_turn_right
	state = KEEP_TURN_RIGHT
	motor.left.target = 200
	motor.right.target = -200
	timer.period[0] = 925












</node>


</network>
